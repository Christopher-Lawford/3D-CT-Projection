/// <summary>
/// Converts rotation quaternion to Euler angles and outputs the values to a text file.
/// And then maps them to a specified range of values to control the refresh rate
/// </summary>
/// <param name="pQuaternion">face rotation quaternion</param>
/// <param name="pPitch">rotation about the X-axis</param>
/// <param name="pYaw">rotation about the Y-axis</param>
/// <param name="pRoll">rotation about the Z-axis</param>
void ImageRenderer::ExtractFaceRotationInDegrees(const Vector4* pQuaternion, int* pPitch, int* pYaw, int* pRoll)
{
    double x = pQuaternion->x;
    double y = pQuaternion->y;
    double z = pQuaternion->z;
    double w = pQuaternion->w;

	using namespace std;
	ofstream banana;
	banana.open("QuaternionValues.txt", std::fstream::app);
	banana << x << "\n";
	banana << y << "\n";
	banana << z << "\n";
	banana << w << "\n";
	banana.close();

    // convert face rotation quaternion to Euler angles in degrees		
    double dPitch, dYaw, dRoll;
    dPitch = atan2(2 * (y * z + w * x), w * w - x * x - y * y + z * z) / M_PI * 180.0;
    dYaw = asin(2 * (w * y - x * z)) / M_PI * 180.0;
    dRoll = atan2(2 * (x * y + w * z), w * w + x * x - y * y - z * z) / M_PI * 180.0;


    // clamp rotation values in degrees to a specified range of values to control the refresh rate
    double increment = c_FaceRotationIncrementInDegrees; 
    *pPitch = static_cast<int>(floor((dPitch + increment/2.0 * (dPitch > 0 ? 1.0 : -1.0)) / increment) * increment);
    *pYaw = static_cast<int>(floor((dYaw + increment/2.0 * (dYaw > 0 ? 1.0 : -1.0)) / increment) * increment);
    *pRoll = static_cast<int>(floor((dRoll + increment/2.0 * (dRoll > 0 ? 1.0 : -1.0)) / increment) * increment);

	using namespace std;
	ofstream strawberry;
	strawberry.open("AngleValues.txt", std::fstream::app);
	strawberry << pPitch << "\n";
	strawberry << pYaw << "\n";
	strawberry << pRoll << "\n";
	strawberry.close();
